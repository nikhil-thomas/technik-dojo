// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "types": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/client"
	"github.com/spf13/cobra"
)

type (
	// CreateArrayPrismCommand is the command line data structure for the create action of array_prism
	CreateArrayPrismCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ShowArrayPrismCommand is the command line data structure for the show action of array_prism
	ShowArrayPrismCommand struct {
		// Any array parameter
		AnyArray []string
		// Boolean array parameter
		BoolArray []string
		// DateTime array parameter
		DateTimeArray []string
		// Integer array parameter
		IntArray []int
		// Number array parameter
		NumArray []string
		// String array parameter
		StringArray []string
		// UUID array parameter
		UUIDArray   []string
		PrettyPrint bool
	}

	// CreateHashPrismCommand is the command line data structure for the create action of hash_prism
	CreateHashPrismCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ShowHashPrismCommand is the command line data structure for the show action of hash_prism
	ShowHashPrismCommand struct {
		PrettyPrint bool
	}

	// CreatePrismCommand is the command line data structure for the create action of prism
	CreatePrismCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ShowPrismCommand is the command line data structure for the show action of prism
	ShowPrismCommand struct {
		// Any parameter
		AnyParam string
		// Boolean parameter
		BoolParam string
		// DateTime parameter
		DateTimeParam string
		// Integer parameter
		IntParam int
		// Number parameter
		NumParam string
		// String parameter
		StringParam string
		// UUID parameter
		UUIDParam   string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp1 := new(CreateArrayPrismCommand)
	sub = &cobra.Command{
		Use:   `array-prism ["/array"]`,
		Short: `resource array_prism contains artificial actions that show use array in goa`,
		Long: `resource array_prism contains artificial actions that show use array in goa

Payload example:

{
   "any_array": [
      false,
      false
   ],
   "bool_array": [
      false
   ],
   "date_time_array": [
      "1974-08-10T06:52:57Z"
   ],
   "int_array": [
      1136086795579005909,
      1136086795579005909
   ],
   "num_array": [
      0.6227009521813938,
      0.6227009521813938,
      0.6227009521813938
   ],
   "string_array": [
      "Est id et repellendus veniam animi."
   ],
   "uuid_array": [
      "2a98c0aa-4c3b-4f83-b7f8-ca93917974e1",
      "2a98c0aa-4c3b-4f83-b7f8-ca93917974e1"
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(CreateHashPrismCommand)
	sub = &cobra.Command{
		Use:   `hash-prism ["/hash"]`,
		Short: `Resource hash_prism contains artificial actions that showcase the use of the hash type in DSL`,
		Long: `Resource hash_prism contains artificial actions that showcase the use of the hash type in DSL

Payload example:

{
   "any_val_hash": {
      "Ullam in.": 0.6219942009142099
   },
   "bool_val_hash": {
      "Et nostrum facilis velit maiores alias.": false
   },
   "data_time_val_hash": {
      "Atque sit minima repellendus et blanditiis velit.": "2005-04-06T03:53:53Z"
   },
   "int_val_hash": {
      "Enim consequatur.": 5279223279295463933
   },
   "num_val_hash": {
      "Quis dignissimos dolore adipisci asperiores.": 0.10033032330789023
   },
   "string_val_hash": {
      "Qui ea delectus fugiat fuga et quae.": "Est natus impedit."
   },
   "uuid_val_hash": {
      "Dolorem cumque quam et aspernatur qui.": "f775d294-0107-4aeb-88e1-c444dc759b56"
   }
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(CreatePrismCommand)
	sub = &cobra.Command{
		Use:   `prism ["/"]`,
		Short: `Resource prism contains artificial actions which use primitive types in DSL`,
		Long: `Resource prism contains artificial actions which use primitive types in DSL

Payload example:

{
   "any_member": "104434df-9adc-486b-a159-51b7e225a925",
   "bool_member": true,
   "date_time_member": "1992-08-22T12:28:46Z",
   "int_member": 8510789536521976091,
   "num_member": 0.496138932327182,
   "string_member": "Quidem et autem officia rerum fugiat.",
   "uuid_member": "8dc3bd5a-80e3-47a8-a238-1a2570a22deb"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp4 := new(ShowArrayPrismCommand)
	sub = &cobra.Command{
		Use:   `array-prism ["/array"]`,
		Short: `resource array_prism contains artificial actions that show use array in goa`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp5 := new(ShowHashPrismCommand)
	sub = &cobra.Command{
		Use:   `hash-prism ["/hash"]`,
		Short: `Resource hash_prism contains artificial actions that showcase the use of the hash type in DSL`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(ShowPrismCommand)
	sub = &cobra.Command{
		Use:   `prism ["/"]`,
		Short: `Resource prism contains artificial actions which use primitive types in DSL`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreateArrayPrismCommand command.
func (cmd *CreateArrayPrismCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/array"
	}
	var payload client.CreateArrayPrismPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateArrayPrism(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateArrayPrismCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ShowArrayPrismCommand command.
func (cmd *ShowArrayPrismCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/array"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp7 []interface{}
	if cmd.AnyArray != nil {
		var err error
		tmp7, err = jsonArray(cmd.AnyArray)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into []interface{} value", "flag", "--any_array", "err", err)
			return err
		}
	}
	var tmp8 []bool
	if cmd.BoolArray != nil {
		var err error
		tmp8, err = boolArray(cmd.BoolArray)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into []bool value", "flag", "--bool_array", "err", err)
			return err
		}
	}
	var tmp9 []time.Time
	if cmd.DateTimeArray != nil {
		var err error
		tmp9, err = timeArray(cmd.DateTimeArray)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into []time.Time value", "flag", "--date_time_array", "err", err)
			return err
		}
	}
	var tmp10 []float64
	if cmd.NumArray != nil {
		var err error
		tmp10, err = float64Array(cmd.NumArray)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into []float64 value", "flag", "--num_array", "err", err)
			return err
		}
	}
	var tmp11 []uuid.UUID
	if cmd.UUIDArray != nil {
		var err error
		tmp11, err = uuidArray(cmd.UUIDArray)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into []uuid.UUID value", "flag", "--uuid_array", "err", err)
			return err
		}
	}
	resp, err := c.ShowArrayPrism(ctx, path, tmp7, tmp8, tmp9, cmd.IntArray, tmp10, cmd.StringArray, tmp11)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowArrayPrismCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var anyArray []string
	cc.Flags().StringSliceVar(&cmd.AnyArray, "any_array", anyArray, `Any array parameter`)
	var boolArray []string
	cc.Flags().StringSliceVar(&cmd.BoolArray, "bool_array", boolArray, `Boolean array parameter`)
	var dateTimeArray []string
	cc.Flags().StringSliceVar(&cmd.DateTimeArray, "date_time_array", dateTimeArray, `DateTime array parameter`)
	var intArray []int
	cc.Flags().IntSliceVar(&cmd.IntArray, "int_array", intArray, `Integer array parameter`)
	var numArray []string
	cc.Flags().StringSliceVar(&cmd.NumArray, "num_array", numArray, `Number array parameter`)
	var stringArray []string
	cc.Flags().StringSliceVar(&cmd.StringArray, "string_array", stringArray, `String array parameter`)
	var uuidArray []string
	cc.Flags().StringSliceVar(&cmd.UUIDArray, "uuid_array", uuidArray, `UUID array parameter`)
}

// Run makes the HTTP request corresponding to the CreateHashPrismCommand command.
func (cmd *CreateHashPrismCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/hash"
	}
	var payload client.CreateHashPrismPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateHashPrism(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateHashPrismCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ShowHashPrismCommand command.
func (cmd *ShowHashPrismCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/hash"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowHashPrism(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowHashPrismCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the CreatePrismCommand command.
func (cmd *CreatePrismCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/"
	}
	var payload client.CreatePrismPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreatePrism(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePrismCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ShowPrismCommand command.
func (cmd *ShowPrismCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp12 *interface{}
	if cmd.AnyParam != "" {
		var err error
		tmp12, err = jsonVal(cmd.AnyParam)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *interface{} value", "flag", "--any_param", "err", err)
			return err
		}
	}
	var tmp13 *bool
	if cmd.BoolParam != "" {
		var err error
		tmp13, err = boolVal(cmd.BoolParam)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--bool_param", "err", err)
			return err
		}
	}
	var tmp14 *time.Time
	if cmd.DateTimeParam != "" {
		var err error
		tmp14, err = timeVal(cmd.DateTimeParam)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--date_time_param", "err", err)
			return err
		}
	}
	var tmp15 *float64
	if cmd.NumParam != "" {
		var err error
		tmp15, err = float64Val(cmd.NumParam)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *float64 value", "flag", "--num_param", "err", err)
			return err
		}
	}
	var tmp16 *uuid.UUID
	if cmd.UUIDParam != "" {
		var err error
		tmp16, err = uuidVal(cmd.UUIDParam)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--uuid_param", "err", err)
			return err
		}
	}
	resp, err := c.ShowPrism(ctx, path, tmp12, tmp13, tmp14, intFlagVal("int_param", cmd.IntParam), tmp15, stringFlagVal("string_param", cmd.StringParam), tmp16)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowPrismCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var anyParam string
	cc.Flags().StringVar(&cmd.AnyParam, "any_param", anyParam, `Any parameter`)
	var boolParam string
	cc.Flags().StringVar(&cmd.BoolParam, "bool_param", boolParam, `Boolean parameter`)
	var dateTimeParam string
	cc.Flags().StringVar(&cmd.DateTimeParam, "date_time_param", dateTimeParam, `DateTime parameter`)
	var intParam int
	cc.Flags().IntVar(&cmd.IntParam, "int_param", intParam, `Integer parameter`)
	var numParam string
	cc.Flags().StringVar(&cmd.NumParam, "num_param", numParam, `Number parameter`)
	var stringParam string
	cc.Flags().StringVar(&cmd.StringParam, "string_param", stringParam, `String parameter`)
	var uuidParam string
	cc.Flags().StringVar(&cmd.UUIDParam, "uuid_param", uuidParam, `UUID parameter`)
}
