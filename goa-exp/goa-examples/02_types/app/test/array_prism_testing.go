// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "types": array_prism TestHelpers
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types
// --version=v1.3.1

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/app"
	uuid "github.com/satori/go.uuid"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"time"
)

// ShowArrayPrismOK runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowArrayPrismOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ArrayPrismController, anyArray []interface{}, boolArray []bool, dateTimeArray []time.Time, intArray []int, numArray []float64, stringArray []string, uuidArray []uuid.UUID) (http.ResponseWriter, *app.GoadesignExamplesArrayprism) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := make([]string, len(anyArray))
		for i, v := range anyArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["any_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(boolArray))
		for i, v := range boolArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["bool_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(dateTimeArray))
		for i, v := range dateTimeArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["date_time_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["int_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(numArray))
		for i, v := range numArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["num_array"] = sliceVal
	}
	{
		sliceVal := stringArray
		query["string_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(uuidArray))
		for i, v := range uuidArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["uuid_array"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/array"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := make([]string, len(anyArray))
		for i, v := range anyArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["any_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(boolArray))
		for i, v := range boolArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["bool_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(dateTimeArray))
		for i, v := range dateTimeArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["date_time_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["int_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(numArray))
		for i, v := range numArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["num_array"] = sliceVal
	}
	{
		sliceVal := stringArray
		prms["string_array"] = sliceVal
	}
	{
		sliceVal := make([]string, len(uuidArray))
		for i, v := range uuidArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["uuid_array"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ArrayPrismTest"), rw, req, prms)
	showCtx, _err := app.NewShowArrayPrismContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.GoadesignExamplesArrayprism
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.GoadesignExamplesArrayprism)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.GoadesignExamplesArrayprism", resp, resp)
		}
	}

	// Return results
	return rw, mt
}
