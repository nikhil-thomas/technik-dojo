// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "types": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ArrayPrismController is the controller interface for the ArrayPrism actions.
type ArrayPrismController interface {
	goa.Muxer
	Create(*CreateArrayPrismContext) error
	Show(*ShowArrayPrismContext) error
}

// MountArrayPrismController "mounts" a ArrayPrism resource controller on the given service.
func MountArrayPrismController(service *goa.Service, ctrl ArrayPrismController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateArrayPrismContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateArrayPrismPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/array", ctrl.MuxHandler("create", h, unmarshalCreateArrayPrismPayload))
	service.LogInfo("mount", "ctrl", "ArrayPrism", "action", "Create", "route", "POST /array")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowArrayPrismContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/array", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "ArrayPrism", "action", "Show", "route", "GET /array")
}

// unmarshalCreateArrayPrismPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateArrayPrismPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createArrayPrismPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// HashPrismController is the controller interface for the HashPrism actions.
type HashPrismController interface {
	goa.Muxer
	Create(*CreateHashPrismContext) error
	Show(*ShowHashPrismContext) error
}

// MountHashPrismController "mounts" a HashPrism resource controller on the given service.
func MountHashPrismController(service *goa.Service, ctrl HashPrismController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateHashPrismContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateHashPrismPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/hash", ctrl.MuxHandler("create", h, unmarshalCreateHashPrismPayload))
	service.LogInfo("mount", "ctrl", "HashPrism", "action", "Create", "route", "POST /hash")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowHashPrismContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/hash", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "HashPrism", "action", "Show", "route", "GET /hash")
}

// unmarshalCreateHashPrismPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateHashPrismPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createHashPrismPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PrismController is the controller interface for the Prism actions.
type PrismController interface {
	goa.Muxer
	Create(*CreatePrismContext) error
	Show(*ShowPrismContext) error
}

// MountPrismController "mounts" a Prism resource controller on the given service.
func MountPrismController(service *goa.Service, ctrl PrismController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePrismContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreatePrismPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/", ctrl.MuxHandler("create", h, unmarshalCreatePrismPayload))
	service.LogInfo("mount", "ctrl", "Prism", "action", "Create", "route", "POST /")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPrismContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Prism", "action", "Show", "route", "GET /")
}

// unmarshalCreatePrismPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePrismPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createPrismPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
