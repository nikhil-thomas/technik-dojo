// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "types": hash_prism Resource Client
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"time"
)

// CreateHashPrismPayload is the hash_prism create action payload.
type CreateHashPrismPayload struct {
	// Hash with Any value member
	AnyValHash map[string]interface{} `form:"any_val_hash,omitempty" json:"any_val_hash,omitempty" yaml:"any_val_hash,omitempty" xml:"any_val_hash,omitempty"`
	// Hash with Boolean value member
	BoolValHash map[string]bool `form:"bool_val_hash,omitempty" json:"bool_val_hash,omitempty" yaml:"bool_val_hash,omitempty" xml:"bool_val_hash,omitempty"`
	// Hash with DateTime value member
	DataTimeValHash map[string]time.Time `form:"data_time_val_hash,omitempty" json:"data_time_val_hash,omitempty" yaml:"data_time_val_hash,omitempty" xml:"data_time_val_hash,omitempty"`
	// Hash with Integer value member
	IntValHash map[string]int `form:"int_val_hash,omitempty" json:"int_val_hash,omitempty" yaml:"int_val_hash,omitempty" xml:"int_val_hash,omitempty"`
	// Hash with Number value member
	NumValHash map[string]float64 `form:"num_val_hash,omitempty" json:"num_val_hash,omitempty" yaml:"num_val_hash,omitempty" xml:"num_val_hash,omitempty"`
	// Hash with String value member
	StringValHash map[string]string `form:"string_val_hash,omitempty" json:"string_val_hash,omitempty" yaml:"string_val_hash,omitempty" xml:"string_val_hash,omitempty"`
	// Hash with UUID value member
	UUIDValHash map[string]uuid.UUID `form:"uuid_val_hash,omitempty" json:"uuid_val_hash,omitempty" yaml:"uuid_val_hash,omitempty" xml:"uuid_val_hash,omitempty"`
}

// CreateHashPrismPath computes a request path to the create action of hash_prism.
func CreateHashPrismPath() string {

	return fmt.Sprintf("/hash")
}

// Action create acepts a payload with one hash member per primitive type, each using the type as value and String as key
func (c *Client) CreateHashPrism(ctx context.Context, path string, payload *CreateHashPrismPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateHashPrismRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateHashPrismRequest create the request corresponding to the create action endpoint of the hash_prism resource.
func (c *Client) NewCreateHashPrismRequest(ctx context.Context, path string, payload *CreateHashPrismPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowHashPrismPath computes a request path to the show action of hash_prism.
func ShowHashPrismPath() string {

	return fmt.Sprintf("/hash")
}

// Action show returns a media type with one hash memmerb per primitive type, each using the primitive type as value and as a key
func (c *Client) ShowHashPrism(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowHashPrismRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowHashPrismRequest create the request corresponding to the show action endpoint of the hash_prism resource.
func (c *Client) NewShowHashPrismRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
