// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "types": prism Resource Client
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-examples/02_types
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// CreatePrismPayload is the prism create action payload.
type CreatePrismPayload struct {
	// Any member
	AnyMember interface{} `form:"any_member,omitempty" json:"any_member,omitempty" yaml:"any_member,omitempty" xml:"any_member,omitempty"`
	// Boolean member
	BoolMember *bool `form:"bool_member,omitempty" json:"bool_member,omitempty" yaml:"bool_member,omitempty" xml:"bool_member,omitempty"`
	// DateTime member
	DateTimeMember *time.Time `form:"date_time_member,omitempty" json:"date_time_member,omitempty" yaml:"date_time_member,omitempty" xml:"date_time_member,omitempty"`
	// Integer member
	IntMember *int `form:"int_member,omitempty" json:"int_member,omitempty" yaml:"int_member,omitempty" xml:"int_member,omitempty"`
	// Number member
	NumMember *float64 `form:"num_member,omitempty" json:"num_member,omitempty" yaml:"num_member,omitempty" xml:"num_member,omitempty"`
	// String member
	StringMember *string `form:"string_member,omitempty" json:"string_member,omitempty" yaml:"string_member,omitempty" xml:"string_member,omitempty"`
	// UUID member
	UUIDMember *uuid.UUID `form:"uuid_member,omitempty" json:"uuid_member,omitempty" yaml:"uuid_member,omitempty" xml:"uuid_member,omitempty"`
}

// CreatePrismPath computes a request path to the create action of prism.
func CreatePrismPath() string {

	return fmt.Sprintf("/")
}

// Action create accepts a payload with one member for each primitive type
func (c *Client) CreatePrism(ctx context.Context, path string, payload *CreatePrismPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreatePrismRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreatePrismRequest create the request corresponding to the create action endpoint of the prism resource.
func (c *Client) NewCreatePrismRequest(ctx context.Context, path string, payload *CreatePrismPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowPrismPath computes a request path to the show action of prism.
func ShowPrismPath() string {

	return fmt.Sprintf("/")
}

// Action show accepts one querystring param for each primitive type
func (c *Client) ShowPrism(ctx context.Context, path string, anyParam *interface{}, boolParam *bool, dateTimeParam *time.Time, intParam *int, numParam *float64, stringParam *string, uuidParam *uuid.UUID) (*http.Response, error) {
	req, err := c.NewShowPrismRequest(ctx, path, anyParam, boolParam, dateTimeParam, intParam, numParam, stringParam, uuidParam)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPrismRequest create the request corresponding to the show action endpoint of the prism resource.
func (c *Client) NewShowPrismRequest(ctx context.Context, path string, anyParam *interface{}, boolParam *bool, dateTimeParam *time.Time, intParam *int, numParam *float64, stringParam *string, uuidParam *uuid.UUID) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if anyParam != nil {
		tmp24 := fmt.Sprintf("%v", *anyParam)
		values.Set("any_param", tmp24)
	}
	if boolParam != nil {
		tmp25 := strconv.FormatBool(*boolParam)
		values.Set("bool_param", tmp25)
	}
	if dateTimeParam != nil {
		tmp26 := dateTimeParam.Format(time.RFC3339)
		values.Set("date_time_param", tmp26)
	}
	if intParam != nil {
		tmp27 := strconv.Itoa(*intParam)
		values.Set("int_param", tmp27)
	}
	if numParam != nil {
		tmp28 := strconv.FormatFloat(*numParam, 'f', -1, 64)
		values.Set("num_param", tmp28)
	}
	if stringParam != nil {
		values.Set("string_param", *stringParam)
	}
	if uuidParam != nil {
		tmp29 := uuidParam.String()
		values.Set("uuid_param", tmp29)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
