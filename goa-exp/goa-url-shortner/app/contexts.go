// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "URL shortner API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-url-shortner/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-url-shortner
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AnalyticsShortnerContext provides the shortner analytics action context.
type AnalyticsShortnerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Path string
}

// NewAnalyticsShortnerContext parses the incoming request URL and body, performs validations and creates the
// context used by the shortner controller analytics action.
func NewAnalyticsShortnerContext(ctx context.Context, r *http.Request, service *goa.Service) (*AnalyticsShortnerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AnalyticsShortnerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPath := req.Params["path"]
	if len(paramPath) > 0 {
		rawPath := paramPath[0]
		rctx.Path = rawPath
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AnalyticsShortnerContext) OK(r *Analytics) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.analytics+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AnalyticsShortnerContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AnalyticsShortnerContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateShortnerContext provides the shortner create action context.
type CreateShortnerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateLinkPayload
}

// NewCreateShortnerContext parses the incoming request URL and body, performs validations and creates the
// context used by the shortner controller create action.
func NewCreateShortnerContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateShortnerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateShortnerContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateShortnerContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateShortnerContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteShortnerContext provides the shortner delete action context.
type DeleteShortnerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Path string
}

// NewDeleteShortnerContext parses the incoming request URL and body, performs validations and creates the
// context used by the shortner controller delete action.
func NewDeleteShortnerContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteShortnerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteShortnerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPath := req.Params["path"]
	if len(paramPath) > 0 {
		rawPath := paramPath[0]
		rctx.Path = rawPath
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteShortnerContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteShortnerContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteShortnerContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetShortnerContext provides the shortner get action context.
type GetShortnerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Path string
}

// NewGetShortnerContext parses the incoming request URL and body, performs validations and creates the
// context used by the shortner controller get action.
func NewGetShortnerContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetShortnerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetShortnerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPath := req.Params["path"]
	if len(paramPath) > 0 {
		rawPath := paramPath[0]
		rctx.Path = rawPath
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetShortnerContext) OK(r *URL) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.url+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetShortnerContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetShortnerContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateShortnerContext provides the shortner update action context.
type UpdateShortnerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Path    string
	Payload *UpdateLinkPayload
}

// NewUpdateShortnerContext parses the incoming request URL and body, performs validations and creates the
// context used by the shortner controller update action.
func NewUpdateShortnerContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateShortnerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateShortnerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPath := req.Params["path"]
	if len(paramPath) > 0 {
		rawPath := paramPath[0]
		rctx.Path = rawPath
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateShortnerContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateShortnerContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateShortnerContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
