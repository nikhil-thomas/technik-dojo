// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "URL shortner API": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-url-shortner/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-url-shortner
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ShortnerController is the controller interface for the Shortner actions.
type ShortnerController interface {
	goa.Muxer
	Analytics(*AnalyticsShortnerContext) error
	Create(*CreateShortnerContext) error
	Delete(*DeleteShortnerContext) error
	Get(*GetShortnerContext) error
	Update(*UpdateShortnerContext) error
}

// MountShortnerController "mounts" a Shortner resource controller on the given service.
func MountShortnerController(service *goa.Service, ctrl ShortnerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/s/:path/analytics", ctrl.MuxHandler("preflight", handleShortnerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/s", ctrl.MuxHandler("preflight", handleShortnerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/s/:path", ctrl.MuxHandler("preflight", handleShortnerOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAnalyticsShortnerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Analytics(rctx)
	}
	h = handleShortnerOrigin(h)
	service.Mux.Handle("GET", "/api/s/:path/analytics", ctrl.MuxHandler("analytics", h, nil))
	service.LogInfo("mount", "ctrl", "Shortner", "action", "Analytics", "route", "GET /api/s/:path/analytics")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateShortnerContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateLinkPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleShortnerOrigin(h)
	service.Mux.Handle("POST", "/api/s", ctrl.MuxHandler("create", h, unmarshalCreateShortnerPayload))
	service.LogInfo("mount", "ctrl", "Shortner", "action", "Create", "route", "POST /api/s")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteShortnerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleShortnerOrigin(h)
	service.Mux.Handle("DELETE", "/api/s/:path", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Shortner", "action", "Delete", "route", "DELETE /api/s/:path")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetShortnerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleShortnerOrigin(h)
	service.Mux.Handle("GET", "/api/s/:path", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Shortner", "action", "Get", "route", "GET /api/s/:path")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateShortnerContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateLinkPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleShortnerOrigin(h)
	service.Mux.Handle("PUT", "/api/s/:path", ctrl.MuxHandler("update", h, unmarshalUpdateShortnerPayload))
	service.LogInfo("mount", "ctrl", "Shortner", "action", "Update", "route", "PUT /api/s/:path")
}

// handleShortnerOrigin applies the CORS response headers corresponding to the origin.
func handleShortnerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE, PUT, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateShortnerPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateShortnerPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createLinkPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateShortnerPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateShortnerPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateLinkPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
