// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "URL shortner API": shortner Resource Client
//
// Command:
// $ goagen
// --design=github.com/nikhil-thomas/technik-dojo/goa-exp/goa-url-shortner/design
// --out=$(GOPATH)/src/github.com/nikhil-thomas/technik-dojo/goa-exp/goa-url-shortner
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AnalyticsShortnerPath computes a request path to the analytics action of shortner.
func AnalyticsShortnerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s/analytics", param0)
}

// Get analytics for a URL
func (c *Client) AnalyticsShortner(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAnalyticsShortnerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAnalyticsShortnerRequest create the request corresponding to the analytics action endpoint of the shortner resource.
func (c *Client) NewAnalyticsShortnerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateShortnerPath computes a request path to the create action of shortner.
func CreateShortnerPath() string {

	return fmt.Sprintf("/api/s")
}

// Create a url
func (c *Client) CreateShortner(ctx context.Context, path string, payload *CreateLinkPayload) (*http.Response, error) {
	req, err := c.NewCreateShortnerRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateShortnerRequest create the request corresponding to the create action endpoint of the shortner resource.
func (c *Client) NewCreateShortnerRequest(ctx context.Context, path string, payload *CreateLinkPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// DeleteShortnerPath computes a request path to the delete action of shortner.
func DeleteShortnerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s", param0)
}

// Delete a url
func (c *Client) DeleteShortner(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteShortnerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteShortnerRequest create the request corresponding to the delete action endpoint of the shortner resource.
func (c *Client) NewDeleteShortnerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetShortnerPath computes a request path to the get action of shortner.
func GetShortnerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s", param0)
}

// Get a URL
func (c *Client) GetShortner(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetShortnerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetShortnerRequest create the request corresponding to the get action endpoint of the shortner resource.
func (c *Client) NewGetShortnerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateShortnerPath computes a request path to the update action of shortner.
func UpdateShortnerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s", param0)
}

// Update a url
func (c *Client) UpdateShortner(ctx context.Context, path string, payload *UpdateLinkPayload) (*http.Response, error) {
	req, err := c.NewUpdateShortnerRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateShortnerRequest create the request corresponding to the update action endpoint of the shortner resource.
func (c *Client) NewUpdateShortnerRequest(ctx context.Context, path string, payload *UpdateLinkPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
